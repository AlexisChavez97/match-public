.contain.center-vertical
  .main-content.medium
    .activities
      %h3.text.red= @activity.name
      %h5
        = @activity.activity_type
        %em.points=t('labels.points', { score: @activity.score })
      - if @activity.activity_statuses.exists?
        %p
          = t('activities.approved_by', users: judges_appproves(@activity))
      -unless @activity.activity_type == 'Post'
        %h6.text.red.mt-4=t('user.judge.activities.description') if @activity.description
        %p= markdown(@activity.description)
        -if @activity.activity_type == 'Curso'
          %h6.text.red= t('user.judge.activities.intended_audence') if @activity.pitch_audience
          %p= markdown(@activity.pitch_audience)
          %h6.text.red= t('user.judge.activities.outline') if @activity.abstract_outline
          %p= markdown(@activity.abstract_outline)
        -else
          %h6.text.red= t('user.judge.activities.pitch') if @activity.pitch_audience
          %p= markdown(@activity.pitch_audience)
          %h6.text.red= t('user.judge.activities.abstract') if @activity.abstract_outline
          %p= markdown(@activity.abstract_outline)

      - unless @activity.notes&.empty?
        %h6.text.red= t("labels.link")
        %p= sanitize_links(@activity.notes)
      -if @activity.english
        %h6.text.red= t('labels.english')
        %p
          - if @activity.english_approve
            = image_tag('ic-checked', class: "check-activity approve-#{@activity.english_approve}")
          - else
            = image_tag('ic-not-approved', class: "check-activity approve-#{@activity.english_approve}")
          %label= t('labels.english')
      %h6.text.red= t('labels.events')
      - unless @activity.locations.empty?
        %ul
          - @activity.locations&.each do |events|
            %li
              -if events.approve
                = image_tag('ic-checked', class: "approve-#{events.approve} check-activity")
              -else
                = image_tag('ic-not-approved', class: "approve-#{events.approve} check-activity")
              %label= "#{events.name}"
      - else
        %p= t('labels.not_location')
      - if @activity.files.attached?
        %h6.text.red= t('labels.archives')
        - @activity.files.each do |file|
          %label= file.filename
          = link_to t('labels.download'), file, disposition: "attachment", class:'button', target: :_blank
      %hr.mt-5

      %h5.mt-5.mb-5
        = t("comments.all")
      - sorted_comments(@activity).each_with_index do |feedback, i|
        %div{:id => "com_#{i}", class: 'comment'}
          %h6.gray.d-flex.justify-content-between{class: feedback.user.judge? ? 'judge' : 'regular'}
            = user_name(feedback.user)
            - if feedback.user == current_user
              .original_comment
                %input{type: 'hidden', value: feedback.comment, id: "originalText_#{i}"}
              .edit_comment
                = link_to t('buttons.edit'), '#', :id => "#{i}"
              .form_data
                %input{ type: 'hidden', id: "commentId#{i}", value: "#{@activity.id}"}
                %input{ type: 'hidden', id: "feedbackId#{i}", value: "#{feedback.id}"}
          .comment-content
            %p{ class: 'gray', id: "comment_#{i}", class: 'mt-3'}
              = markdown(feedback.comment, feedback.file)
            %textarea{ value: "#{feedback.comment}", hidden: true, id: "editor_#{i}", class: 'input-text mb-0 mt-2'}

      .mt-4
        - if user_can_comment?(@activity)
          = simple_form_for [ @match, @activity, @feedback] do |f|
            = f.text_area :comment, label: t('comments.create'), placeholder: t('placeholders.comment'), input_html: { class: 'input-text mt-4'}, required: false
            .comment-actions
              %ul
                %li#boldButton
                  = link_to t('buttons.markdown.bold'), ''
                %li#italicButton
                  = link_to t('buttons.markdown.italic'), ''
                %li#codeButton
                  = link_to t('buttons.markdown.code'), ''
                %li#linkButton
                  = link_to t('buttons.markdown.link'), ''
                %li#quoteButton
                  = link_to t('buttons.markdown.quote'), ''
                %li#listButton
                  = link_to t('buttons.markdown.list'), ''
            = f.file_field :file, class:'inputfile', accept: '.jpg,.png,.jpeg'
            = f.button :submit, t('comments.create'), class: 'button'
